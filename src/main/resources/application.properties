#spring.h2.console.enabled=true
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.show-sql=true
#spring.jpa.generate-ddl=true
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.application.name=jobportal


spring.datasource.url=jdbc:postgresql://localhost:5432/jobapp
spring.datasource.username=yug
spring.datasource.password=yug
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect




#To see all the endpoints that are exposed by actuator
management.endpoints.web.exposure.include=*

#To see the details about the each endpoint
management.endpoint.health.show-details=always

#To add the information about the application in the info endpoint of actuator
management.info.env.enabled=true
info.app.name="Job Portal"
info.app.version=1.0.0


#To get the shutdown endpoint and can only be executed via POST request
management.endpoint.shutdown.enabled=true
server.shutdown=graceful


#Command for creating docker image
#./mvnw spring-boot:build-image "-Dspring-boot:build-image.imageName=yugkhokhar/jobportal"


#docker commands

#1. docker pull imageName : pull an image from the dockerhub or any repo
#1. docker run -it -d -p <host-port>:<container-port> --name <name> <image> : runned an docker container from the image
#1. docker stop <container-id/container-name> :  stops an docker container if started
#1. docker start <container-id/container-name> : start an docker container if stopped
#   docker rm <container-id/container-name> : remove an container
#   docker rmi <image-id/imageName> : remove an image
#   docker ps : get active containers
#   docker ps -a : get all active and inactive containers
#   docker exec -it <container-id/container-name> bash : enter the docker running container to execute commands
#   docker build -t <username/image> . : create image
#   docker logs <container-id/container-name> : get container logs
#   docker inspect <container-id/container-name> : get container details
#   docker network create <network-name>

